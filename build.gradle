buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixin', version: '0.8.2'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'idea'
apply plugin: 'maven-publish'

def mc_version = project.properties.get('mc.version')
def mod_major = project.properties.get('nuggetpatch.major')
def mod_minor = project.properties.get('nuggetpatch.minor')
def mod_patch = project.properties.get('nuggetpatch.patch')

version = "${mc_version}-${mod_major}.${mod_minor}.${mod_patch}"
group = 'me.noeffort.nuggetpatch' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'nuggetpatch'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=nuggetpatch.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            properties 'mixin.env.disableRefMap': 'true'

            mods {
                nuggetpatch {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=nuggetpatch.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            properties 'mixin.env.disableRefMap': 'true'

            mods {
                nuggetpatch {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            properties 'mixin.env.disableRefMap': 'true'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'nuggetpatch', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                nuggetpatch {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

//mixin {
//    add sourceSets.main, 'nuggetpatch.refmap.json'
//}

repositories {
    maven { url = 'https://www.cursemaven.com/'; content {includeGroup 'curse.maven' } }
    mavenCentral()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.8'
    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "nuggetpatch",
                "Specification-Vendor": "nuggetgroup",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor" :"nuggetgroup",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "nuggetpatch.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

task updateMajor {
    group = 'versioning'
    description = 'Update the major version'
    doLast {
        ant.replace(file: 'gradle.properties', token: "nuggetpatch.major=${mod_major}", value: "nuggetpatch.major=${mod_major.toString().toInteger() + 1}")
    }
}

task updateMinor {
    group = 'versioning'
    description = 'Update the minor version'
    doLast {
        ant.replace(file: 'gradle.properties', token: "nuggetpatch.minor=${mod_minor}", value: "nuggetpatch.minor=${mod_minor.toString().toInteger() + 1}")
    }
}

task updatePatch {
    group = 'versioning'
    description = 'Update the patch version'
    doLast {
        ant.replace(file: 'gradle.properties', token: "nuggetpatch.patch=${mod_patch}", value: "nuggetpatch.patch=${mod_patch.toString().toInteger() + 1}")
    }
}